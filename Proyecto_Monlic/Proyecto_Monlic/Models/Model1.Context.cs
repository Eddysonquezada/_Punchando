//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proyecto_Monlic.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BDMonlic1Entities2 : DbContext
    {
        public BDMonlic1Entities2()
            : base("name=BDMonlic1Entities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Ciudades> Ciudades { get; set; }
        public virtual DbSet<Contactos> Contactos { get; set; }
        public virtual DbSet<Departamentos> Departamentos { get; set; }
        public virtual DbSet<Entradas_Salidas> Entradas_Salidas { get; set; }
        public virtual DbSet<Materiales> Materiales { get; set; }
        public virtual DbSet<MovimientoESA> MovimientoESA { get; set; }
        public virtual DbSet<MovimientoESADet> MovimientoESADet { get; set; }
        public virtual DbSet<Movimientos> Movimientos { get; set; }
        public virtual DbSet<TiposDocumentos> TiposDocumentos { get; set; }
        public virtual DbSet<TiposMovimientos> TiposMovimientos { get; set; }
        public virtual DbSet<UnidadMedidas> UnidadMedidas { get; set; }
    
        public virtual int editarcontactos(Nullable<int> idcontacto, string contacto, Nullable<int> documento, Nullable<int> telefono, Nullable<int> idtipod, Nullable<int> idCiudad)
        {
            var idcontactoParameter = idcontacto.HasValue ?
                new ObjectParameter("Idcontacto", idcontacto) :
                new ObjectParameter("Idcontacto", typeof(int));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var documentoParameter = documento.HasValue ?
                new ObjectParameter("Documento", documento) :
                new ObjectParameter("Documento", typeof(int));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var idtipodParameter = idtipod.HasValue ?
                new ObjectParameter("Idtipod", idtipod) :
                new ObjectParameter("Idtipod", typeof(int));
    
            var idCiudadParameter = idCiudad.HasValue ?
                new ObjectParameter("IdCiudad", idCiudad) :
                new ObjectParameter("IdCiudad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editarcontactos", idcontactoParameter, contactoParameter, documentoParameter, telefonoParameter, idtipodParameter, idCiudadParameter);
        }
    
        public virtual int estado_ciudad(Nullable<int> idciudad)
        {
            var idciudadParameter = idciudad.HasValue ?
                new ObjectParameter("Idciudad", idciudad) :
                new ObjectParameter("Idciudad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("estado_ciudad", idciudadParameter);
        }
    
        public virtual int estado_contacto(Nullable<int> idcontacto)
        {
            var idcontactoParameter = idcontacto.HasValue ?
                new ObjectParameter("Idcontacto", idcontacto) :
                new ObjectParameter("Idcontacto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("estado_contacto", idcontactoParameter);
        }
    
        public virtual int estado_material(Nullable<int> idmaterial)
        {
            var idmaterialParameter = idmaterial.HasValue ?
                new ObjectParameter("Idmaterial", idmaterial) :
                new ObjectParameter("Idmaterial", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("estado_material", idmaterialParameter);
        }
    
        public virtual int estado_Medida(Nullable<int> idUnidad)
        {
            var idUnidadParameter = idUnidad.HasValue ?
                new ObjectParameter("IdUnidad", idUnidad) :
                new ObjectParameter("IdUnidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("estado_Medida", idUnidadParameter);
        }
    
        public virtual int StockManage(Nullable<int> idTipoM, Nullable<int> cantidad, Nullable<int> idMaterial)
        {
            var idTipoMParameter = idTipoM.HasValue ?
                new ObjectParameter("idTipoM", idTipoM) :
                new ObjectParameter("idTipoM", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var idMaterialParameter = idMaterial.HasValue ?
                new ObjectParameter("idMaterial", idMaterial) :
                new ObjectParameter("idMaterial", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StockManage", idTipoMParameter, cantidadParameter, idMaterialParameter);
        }
    
        public virtual int StockManage2(Nullable<int> idTipoM, Nullable<int> cantidad, Nullable<int> idMaterial, Nullable<System.DateTime> fecha, Nullable<int> precio, Nullable<int> idContacto)
        {
            var idTipoMParameter = idTipoM.HasValue ?
                new ObjectParameter("idTipoM", idTipoM) :
                new ObjectParameter("idTipoM", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var idMaterialParameter = idMaterial.HasValue ?
                new ObjectParameter("idMaterial", idMaterial) :
                new ObjectParameter("idMaterial", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(int));
    
            var idContactoParameter = idContacto.HasValue ?
                new ObjectParameter("IdContacto", idContacto) :
                new ObjectParameter("IdContacto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StockManage2", idTipoMParameter, cantidadParameter, idMaterialParameter, fechaParameter, precioParameter, idContactoParameter);
        }
    
        public virtual ObjectResult<unidad_activa_Result> unidad_activa()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<unidad_activa_Result>("unidad_activa");
        }
    
        public virtual ObjectResult<unidad_inactiva_Result> unidad_inactiva()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<unidad_inactiva_Result>("unidad_inactiva");
        }
    
        public virtual int validar_contactos(string contacto, Nullable<int> documento, Nullable<int> telefono, Nullable<int> idTipo, Nullable<int> idCiudad)
        {
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var documentoParameter = documento.HasValue ?
                new ObjectParameter("Documento", documento) :
                new ObjectParameter("Documento", typeof(int));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var idTipoParameter = idTipo.HasValue ?
                new ObjectParameter("IdTipo", idTipo) :
                new ObjectParameter("IdTipo", typeof(int));
    
            var idCiudadParameter = idCiudad.HasValue ?
                new ObjectParameter("IdCiudad", idCiudad) :
                new ObjectParameter("IdCiudad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("validar_contactos", contactoParameter, documentoParameter, telefonoParameter, idTipoParameter, idCiudadParameter);
        }
    
        public virtual int validarrepetidos(string unidad)
        {
            var unidadParameter = unidad != null ?
                new ObjectParameter("Unidad", unidad) :
                new ObjectParameter("Unidad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("validarrepetidos", unidadParameter);
        }
    
        public virtual int validarrepetidos_material(string material, string descripcion, Nullable<int> existencia, Nullable<int> precio, Nullable<int> idUnidad)
        {
            var materialParameter = material != null ?
                new ObjectParameter("Material", material) :
                new ObjectParameter("Material", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var existenciaParameter = existencia.HasValue ?
                new ObjectParameter("Existencia", existencia) :
                new ObjectParameter("Existencia", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(int));
    
            var idUnidadParameter = idUnidad.HasValue ?
                new ObjectParameter("IdUnidad", idUnidad) :
                new ObjectParameter("IdUnidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("validarrepetidos_material", materialParameter, descripcionParameter, existenciaParameter, precioParameter, idUnidadParameter);
        }
    
        public virtual int validarrepetidoscontactos(string contacto, Nullable<int> documento, Nullable<int> telefono, Nullable<int> idtipod, Nullable<int> idCiudad)
        {
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var documentoParameter = documento.HasValue ?
                new ObjectParameter("Documento", documento) :
                new ObjectParameter("Documento", typeof(int));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(int));
    
            var idtipodParameter = idtipod.HasValue ?
                new ObjectParameter("Idtipod", idtipod) :
                new ObjectParameter("Idtipod", typeof(int));
    
            var idCiudadParameter = idCiudad.HasValue ?
                new ObjectParameter("IdCiudad", idCiudad) :
                new ObjectParameter("IdCiudad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("validarrepetidoscontactos", contactoParameter, documentoParameter, telefonoParameter, idtipodParameter, idCiudadParameter);
        }
    }
}
